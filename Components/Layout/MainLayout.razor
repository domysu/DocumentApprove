@using DokumentuTvirtinimoSistema.Services
@using DokumentuTvirtinimoSistema.Interfaces
@using DokumentuTvirtinimoSistema.Models
@using Microsoft.EntityFrameworkCore
@inject CustomAuthenticationStateProvider CustomAuth
@inject IUser UserService
@inherits LayoutComponentBase
@using System.Security.Claims

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <NotAuthorized>
                    <a style="text-decoration:none" class="btn btn-primary" href="/login" role="button">
                        <i class="fa-solid fa-circle-user mx-2"></i>Log in
                    </a>
                    <a style="text-decoration:none" class="btn btn-primary" href="/register">
                        <i class="fa-solid fa-user mx-2"></i>Register
                    </a>
                </NotAuthorized>
                <Authorized>
                   
                         <a href="/account/@userId">Profile</a>
                        <a href="/logout">Log out</a>
                    
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    User user = new User();
    private int userId = -1;

    protected override async Task OnInitializedAsync()
    {
        var userObj = await CustomAuth.GetCurrentUser();
        if (userObj != null)
        {
            userId = await GetUser(userObj);
        }
    }

    private async Task<int> GetUser(ClaimsPrincipal user)
    {
        var username = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Name)?.Value;
        Console.WriteLine("Getting username: " + username);
        if (string.IsNullOrEmpty(username))
        {
            return -2;
        }

        var userEntity = await UserService.GetUserByUsernameAsync(username);
        return userEntity?.UserId ?? -1;
    }
    
}
