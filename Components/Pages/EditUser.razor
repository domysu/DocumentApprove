@page "/edit-user/{UserId:int}"
@using DokumentuTvirtinimoSistema.Interfaces
@using DokumentuTvirtinimoSistema.Services
@using DokumentuTvirtinimoSistema.Models
@using Microsoft.AspNetCore.Authorization
@inject RolesService RolesService
@inject UserService UserService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]



<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="user.Username" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="form-group">
        <label for="role">Role</label>
        <InputSelect id="role" class="form-control" @bind-Value="user.RoleID">
            @foreach (var role in roles)
            {
                <option value="@role.Id">@role.RoleName</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Save Changes</button>
</EditForm>

@code {
    [Parameter]
    public int UserId { get; set; }
    private User user = new User();
    private List<Roles> roles = new List<Roles>();
    

    protected override async Task OnInitializedAsync()
    {
        roles = await RolesService.GetRolesAsync(); // Assuming this method exists
        if (UserId != 0)
        {
            user = await UserService.GetUserByIdAsync(UserId);
            if (user == null)
            {
                user = new User();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        
       
            await UserService.updateUser(user);
        
        NavigationManager.NavigateTo("/user-list");
    }
}
