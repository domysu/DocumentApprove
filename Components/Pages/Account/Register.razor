@page "/register"
@using DokumentuTvirtinimoSistema.Interfaces;
@using DokumentuTvirtinimoSistema.Services;
@using DokumentuTvirtinimoSistema.Models;
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject IUser UserService

@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<h3>Register</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
<EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit" FormName="Register">
    <DataAnnotationsValidator />
    <ValidationSummary />
  


    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="newUser.Username" placeholder="Enter username" required/>
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="newUser.Email" placeholder="Enter email" required/>
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="password" placeholder="Enter password" required/>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Register</button>
</EditForm>




@code {
    private string password = "";
    private User newUser;
    private string errorMessage = "";

    protected override void OnInitialized()
    {

        newUser = new User { DepartmentId = 1, RoleID = 2 }; // Assigning user to default department
    }

    public async Task HandleValidSubmit()
    {
        try
        {
            var existingUser = await UserService.GetUserByUsernameAsync(newUser.Username);
            if (existingUser != null)
            {
                errorMessage = "This username is already registered.";
                return; // cancel register
            }


            var userCreated = await UserService.AddUserAsync(newUser, password);
            if (userCreated != null)
            {
                NavigationManager.NavigateTo("/register-success");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch(DbUpdateException a)
        {
            errorMessage = "Error has occured";
        }

    }

}
