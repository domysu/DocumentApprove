@page "/create-form"
@using DokumentuTvirtinimoSistema.Models
@using DokumentuTvirtinimoSistema.Services
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject UserService UserControl
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider CustomAuth
@inject TemplateService TemplateService
@rendermode InteractiveServer

<h3>Create Document Request</h3>

@if (documentRequest != null)
{
    <EditForm Model="@documentRequest" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group col-3">
            <select id="templateId" class="form-control" @onchange="LoadTemplate">
                <option value="">Select a template</option>
                @foreach (var template in templates)
                {
                    <option value="@template.TemplateId">@template.TemplateName</option>
                }
            </select>
        </div>

        <h4 class="mt-2">Document Data Fields</h4>
        @foreach (var data in documentDataList)
        {
            <div class="mb-4">
                <label>Field Name:</label>
                <input class="form-control" @bind-value="data.FieldName" required />
                <label>Field Value:</label>
                <input class="form-control" @bind-value="data.FieldValue" required />
            </div>
        }

        <button class="btn btn-success mt-2" type="button" @onclick="AddDataField">Add Field</button>
        <button class="btn btn-success mt-2" type="submit">Submit</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    private DocumentRequest documentRequest;
    private List<DocumentData> documentDataList = new List<DocumentData>();
    private List<DocumentTemplate> templates = new List<DocumentTemplate>();
    private int? selectedTemplateId;

    protected override async Task OnInitializedAsync()
    {
        templates = await TemplateService.GetAllTemplatesAsync();
        string status = "Submitted for review";
        DateTime createdDate = DateTime.Now;

        documentRequest = new DocumentRequest(status, createdDate);
    }
    /*
   private async Task<string> GetUserDepartmentAsync()
    {
        var getUser = await CustomAuth.GetCurrentUser();
        var currentUser = getUser.Identity.Name;
        var user = await _context.Users.Include(u => u.Department).FirstOrDefaultAsync(u => u.Username == currentUser);
        return user?.Department?.DepartmentName;
    }
    */
    private void AddDataField()
    {
        documentDataList.Add(new DocumentData());
    }

    private async Task LoadTemplate(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int templateId))
        {
            var selectedTemplate = templates.FirstOrDefault(t => t.TemplateId == templateId);
            if (selectedTemplate != null)
            {
                var fields = JsonSerializer.Deserialize<List<DocumentData>>(selectedTemplate.FieldsStructure);
                if (fields != null)
                {
                    documentDataList = fields;
                }
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        documentRequest.DocumentData = documentDataList;
        _context.DocumentRequests.Add(documentRequest);
        await _context.SaveChangesAsync();

        var getUser = await CustomAuth.GetCurrentUser();
        var currentUser = getUser.Identity.Name;

        var documentReview = new DocumentReview(
            documentRequest.RequestId,
            "Pending",
            currentUser,
            DateTime.Now,
            "Initial Submission",
            null,
            DateTime.Now
        );

        _context.DocumentReviews.Add(documentReview);
        await _context.SaveChangesAsync();

        Navigation.NavigateTo("/success");
    }
}
