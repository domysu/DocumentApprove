@page "/document-review/{documentId:int}"
@using DokumentuTvirtinimoSistema.Models
@using DokumentuTvirtinimoSistema.Services
@using DokumentuTvirtinimoSistema.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject CustomAuthenticationStateProvider CustomAuth
@inject IUser UserService
@inject IAudit AuditService
@inject AppDbContext _context
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<h3>Review Document @documentId</h3>

@if (documentReview == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="documentReview" OnValidSubmit="HandleValidSubmit" FormName="DocumentReviewSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="status">Status:</label>
            <InputSelect id="status" class="form-select" @bind-Value="documentReview.Status">
                <option value="">Select a status</option>
                @foreach (var status in Enum.GetValues(typeof(Status)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="comments">Comments:</label>
            <InputText id="comments" class="form-control" @bind-Value="documentReview.Comments" />
        </div>
        <div class="form-group mt-5">
            <label for="reviewedBy">Last Reviewed By:</label>
            <InputText id="reviewedBy" class="form-control-plaintext" @bind-Value="documentReview.ReviewedBy" readonly />
        </div>
        <div class="form-group">
            <label for="reviewedDate">Reviewed Date:</label>
            <InputDate id="reviewedDate" class="form-control-plaintext" @bind-Value="documentReview.ReviewedDate" readonly />
        </div>
        <button type="submit" class="btn btn-primary mt-1">Submit Review</button>
    </EditForm>
}

@code {
    [Parameter] public int documentId { get; set; }

    private DocumentReview documentReview;
    private AuditLogs auditLog;

    protected override async Task OnInitializedAsync()
    {
        documentReview = await _context.DocumentReviews
            .FirstOrDefaultAsync(dr => dr.DocumentId == documentId);

        if (documentReview == null)
        {
            documentReview = new DocumentReview
            {
                DocumentId = documentId,
                SubmittedDate = DateTime.Now,
            };
            _context.DocumentReviews.Add(documentReview);
            await _context.SaveChangesAsync();
        }

        if(documentReview.Status == null)
        {
            documentReview.Status = "Pending"; // not working??
        }
    }

    public async Task<string> GetCurrentUser()
    {
        var currentUser = await CustomAuth.GetCurrentUser();
        return currentUser.Identity.Name;
    }

    private async Task HandleValidSubmit()
    {
        documentReview.ReviewedBy = await GetCurrentUser();
        documentReview.ReviewedDate = DateTime.Now;

        auditLog = new AuditLogs
        {
            AuditDocumentId = documentId,
            AuditStatus = documentReview.Status,
            AuditTimestamp = DateTime.Now,
        };

        await AuditService.AddAuditLog(auditLog);
        await _context.SaveChangesAsync();
        Navigation.NavigateTo("/document-reviews");
    }
}
