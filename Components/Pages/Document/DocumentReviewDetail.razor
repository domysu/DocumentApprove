@page "/document-review/{documentId:int}"
@using DokumentuTvirtinimoSistema.Models
@using DokumentuTvirtinimoSistema.Services
@using DokumentuTvirtinimoSistema.Interfaces
@using Microsoft.EntityFrameworkCore
@inject IAudit AuditService
@inject AppDbContext _context
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
<h3>Review Document @documentId</h3>

@if (documentReview == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="documentReview" OnValidSubmit="HandleValidSubmit" FormName="DocumentReviewSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="status">Status:</label>
            <InputText id="status" @bind-Value="documentReview.Status" />
        </div>
        <div>
            <label for="comments">Comments:</label>
            <InputText id="comments" @bind-Value="documentReview.Comments" />
        </div>
        <div>
            <label for="reviewedBy">Reviewed By:</label>
            <InputText id="reviewedBy" @bind-Value="documentReview.ReviewedBy" />
        </div>
        <div>
            <label for="reviewedDate">Reviewed Date:</label>
            <InputDate id="reviewedDate" @bind-Value="documentReview.ReviewedDate" />
        </div>

        <button type="submit">Submit Review</button>
    </EditForm>
}

@code {
    [Parameter] public int documentId { get; set; }

    private DocumentReview documentReview;
    private AuditLogs AuditLog;

    protected override async Task OnInitializedAsync()
    {
        documentReview = await _context.DocumentReviews
            .FirstOrDefaultAsync(dr => dr.DocumentId == documentId);

        if (documentReview == null)
        {
            documentReview = new DocumentReview
                {
                    DocumentId = documentId,
                    SubmittedDate = DateTime.Now,
                };
            _context.DocumentReviews.Add(documentReview);
            await _context.SaveChangesAsync();

        }

       

    }

    private async Task HandleValidSubmit()
    {
        AuditLog = new AuditLogs
            {
                AuditDocumentId = documentId,
                AuditStatus = documentReview.Status,
                AuditTimestamp = DateTime.Now,


            };
        await AuditService.AddAuditLog(AuditLog);

        await _context.SaveChangesAsync();
        Navigation.NavigateTo("/document-reviews");
    }
}